D G "__PCD__" 0 0 ""4.104""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""07-Nov-15""
D G "__TIME__" 0 0 ""15:27:31"" "Standard Header file for the DSPIC30F5015 device ////////////////"
d G "PIN_B0" 1 25 "5696"
d G "PIN_B1" 1 26 "5697"
d G "PIN_B2" 1 27 "5698"
d G "PIN_B3" 1 28 "5699"
d G "PIN_B4" 1 29 "5700"
d G "PIN_B5" 1 30 "5701"
d G "PIN_B6" 1 31 "5702"
d G "PIN_B7" 1 32 "5703"
d G "PIN_B8" 1 33 "5704"
d G "PIN_B9" 1 34 "5705"
d G "PIN_B10" 1 35 "5706"
d G "PIN_B11" 1 36 "5707"
d G "PIN_B12" 1 37 "5708"
d G "PIN_B13" 1 38 "5709"
d G "PIN_B14" 1 39 "5710"
d G "PIN_B15" 1 40 "5711"
d G "PIN_C13" 1 42 "5757"
d G "PIN_C14" 1 43 "5758"
d G "PIN_C15" 1 44 "5759"
d G "PIN_D0" 1 46 "5792"
d G "PIN_D1" 1 47 "5793"
d G "PIN_D2" 1 48 "5794"
d G "PIN_D3" 1 49 "5795"
d G "PIN_D4" 1 50 "5796"
d G "PIN_D5" 1 51 "5797"
d G "PIN_D6" 1 52 "5798"
d G "PIN_D7" 1 53 "5799"
d G "PIN_D8" 1 54 "5800"
d G "PIN_D9" 1 55 "5801"
d G "PIN_D10" 1 56 "5802"
d G "PIN_D11" 1 57 "5803"
d G "PIN_E0" 1 59 "5840"
d G "PIN_E1" 1 60 "5841"
d G "PIN_E2" 1 61 "5842"
d G "PIN_E3" 1 62 "5843"
d G "PIN_E4" 1 63 "5844"
d G "PIN_E5" 1 64 "5845"
d G "PIN_E6" 1 65 "5846"
d G "PIN_E7" 1 66 "5847"
d G "PIN_F0" 1 68 "5888"
d G "PIN_F1" 1 69 "5889"
d G "PIN_F2" 1 70 "5890"
d G "PIN_F3" 1 71 "5891"
d G "PIN_F4" 1 72 "5892"
d G "PIN_F5" 1 73 "5893"
d G "PIN_F6" 1 74 "5894"
d G "PIN_G2" 1 76 "5938"
d G "PIN_G3" 1 77 "5939"
d G "PIN_G6" 1 78 "5942"
d G "PIN_G7" 1 79 "5943"
d G "PIN_G8" 1 80 "5944"
d G "PIN_G9" 1 81 "5945"
d G "FALSE" 1 84 "0"
d G "TRUE" 1 85 "1"
d G "BYTE" 1 87 "unsigned int8"
d G "BOOLEAN" 1 88 "int1"
d G "getc" 1 90 "getch"
d G "fgetc" 1 91 "getch"
d G "getchar" 1 92 "getch"
d G "putc" 1 93 "putchar"
d G "fputc" 1 94 "putchar"
d G "fgets" 1 95 "gets"
d G "fputs" 1 96 "puts"
d G "UART_ADDRESS" 1 102 "2"
d G "UART_DATA" 1 103 "4"
d G "UART_AUTODETECT" 1 104 "8"
d G "UART_AUTODETECT_NOWAIT" 1 105 "9"
d G "UART_WAKEUP_ON_RDA" 1 106 "10"
d G "UART_SEND_BREAK" 1 107 "13"
d G "WDT_ON" 1 114 "1"
d G "WDT_OFF" 1 115 "0"
d G "RESTART_POWER_UP" 1 120 "0"
d G "RESTART_BROWNOUT" 1 121 "1"
d G "RESTART_WATCHDOG" 1 122 "4"
d G "RESTART_SOFTWARE" 1 123 "6"
d G "RESTART_MCLR" 1 124 "7"
d G "RESTART_ILLEGAL_OP" 1 125 "14"
d G "RESTART_TRAP_CONFLICT" 1 126 "15"
d G "SLEEP_FULL" 1 129 "0" "Default"
d G "SLEEP_IDLE" 1 130 "1" "Clock and peripherals don't stop"
d G "OSC_INTERNAL" 1 134 "32"
d G "OSC_CRYSTAL" 1 135 "1"
d G "OSC_CLOCK" 1 136 "2"
d G "OSC_RC" 1 137 "3"
d G "OSC_SECONDARY" 1 138 "16"
d G "TMR_DISABLED" 1 145 "0x0000"
d G "TMR_INTERNAL" 1 146 "0xA000"
d G "TMR_EXTERNAL" 1 147 "0xA002"
d G "TMR_GATE" 1 148 "0x0040"
d G "T1_EXTERNAL_SYNC" 1 149 "0xA006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 1 150 "0xC002" "This only applies to Timer1"
d G "TMR_DIV_BY_1" 1 152 "0x0000"
d G "TMR_DIV_BY_8" 1 153 "0x0010"
d G "TMR_DIV_BY_64" 1 154 "0x0020"
d G "TMR_DIV_BY_256" 1 155 "0x0030"
d G "TMR_32_BIT" 1 156 "0x0008" "Only for even numbered timers"
d G "CAPTURE_OFF" 1 162 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 1 163 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 1 164 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 1 165 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 1 166 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 1 167 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 1 168 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 1 171 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 1 172 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 1 173 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 1 174 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 1 177 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 1 178 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 1 181 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 1 182 "0x0000" "Capture module continues during idle mode"
d G "COMPARE_OFF" 1 188 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 1 189 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 1 190 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 1 191 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 1 192 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 1 193 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 1 194 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 1 195 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 1 198 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 1 199 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 1 202 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 1 203 "0x0000" "Compare module continues during idle mode"
d G "SPI_MASTER" 1 208 "0x0020"
d G "SPI_SLAVE" 1 209 "0x1000"
d G "SPI_L_TO_H" 1 210 "0"
d G "SPI_H_TO_L" 1 211 "0x0100"
d G "SPI_CLK_DIV_1" 1 212 "0x001F"
d G "SPI_CLK_DIV_4" 1 213 "0x001E"
d G "SPI_CLK_DIV_16" 1 214 "0x001D"
d G "SPI_CLK_DIV_64" 1 215 "0x001C"
d G "SPI_MODE_16B" 1 216 "0x0400"
d G "SPI_SS_DISABLED" 1 217 "0x8000"
d G "ADC_OFF" 1 226 "0x10000"
d G "ADC_CLOCK" 1 227 "0x0000" "External"
d G "ADC_CLOCK_DIV_2" 1 228 "0x0001"
d G "ADC_CLOCK_DIV_4" 1 229 "0x0003"
d G "ADC_CLOCK_DIV_8" 1 230 "0x0007"
d G "ADC_CLOCK_DIV_16" 1 231 "0x000F"
d G "ADC_CLOCK_DIV_32" 1 232 "0x001F"
d G "ADC_CLOCK_DIV_64" 1 233 "0x003F"
d G "ADC_CLOCK_INTERNAL" 1 234 "0x0080" "Internal"
d G "ADC_TAD_MUL_0" 1 238 "0x0000"
d G "ADC_TAD_MUL_2" 1 239 "0x0200"
d G "ADC_TAD_MUL_4" 1 240 "0x0400"
d G "ADC_TAD_MUL_8" 1 241 "0x0800"
d G "ADC_TAD_MUL_16" 1 242 "0x1000"
d G "ADC_TAD_MUL_31" 1 243 "0x1F00"
d G "ADC_START_AND_READ" 1 246 "0x07"
d G "ADC_START_ONLY" 1 247 "0x01"
d G "ADC_READ_ONLY" 1 248 "0x06"
d G "NO_ANALOGS" 1 255 "0" "None"
d G "ALL_ANALOG" 1 256 "0xFFFFFFFF" "All"
d G "sAN0" 1 257 "0x00000001" "| B0"
d G "sAN1" 1 258 "0x00000002" "| B1"
d G "sAN2" 1 259 "0x00000004" "| B2"
d G "sAN3" 1 260 "0x00000008" "| B3"
d G "sAN4" 1 261 "0x00000010" "| B4"
d G "sAN5" 1 262 "0x00000020" "| B5"
d G "sAN6" 1 263 "0x00000040" "| B6"
d G "sAN7" 1 264 "0x00000080" "| B7"
d G "sAN8" 1 265 "0x00000100" "| B8"
d G "sAN9" 1 266 "0x00000200" "| B9"
d G "sAN10" 1 267 "0x00000400" "| B10"
d G "sAN11" 1 268 "0x00000800" "| B11"
d G "sAN12" 1 269 "0x00001000" "| B12"
d G "sAN13" 1 270 "0x00002000" "| B13"
d G "sAN14" 1 271 "0x00004000" "| B14"
d G "sAN15" 1 272 "0x00008000" "| 15"
d G "sAN16" 1 273 "0x00010000" "| C1"
d G "sAN17" 1 274 "0x00020000" "| C2"
d G "sAN18" 1 275 "0x00040000" "| C3"
d G "sAN19" 1 276 "0x00080000" "| 4"
d G "sAN20" 1 277 "0x00100000" "| A12"
d G "sAN21" 1 278 "0x00200000" "| A13"
d G "sAN22" 1 279 "0x00400000" "| A6"
d G "sAN23" 1 280 "0x00800000" "| A7"
d G "sAN24" 1 281 "0x01000000" "| E0"
d G "sAN25" 1 282 "0x02000000" "| E1"
d G "sAN26" 1 283 "0x04000000" "| E2"
d G "sAN27" 1 284 "0x08000000" "| E3"
d G "sAN28" 1 285 "0x10000000" "| E4"
d G "sAN29" 1 286 "0x20000000" "| E5"
d G "sAN30" 1 287 "0x40000000" "| E6"
d G "sAN31" 1 288 "0x80000000" "| 7"
d G "VSS_VDD" 1 291 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 1 292 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 1 293 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 1 294 "0x2000" "Range 0-VrefH"
d G "QEI_DISABLED" 1 301 "0"
d G "QEI_MODE_X2" 1 302 "0x0400"
d G "QEI_MODE_X4" 1 303 "0x0600"
d G "QEI_MODE_TIMER" 1 304 "0x0100"
d G "QEI_STOP_WHEN_IDLE" 1 305 "0x2000"
d G "QEI_SWAP_AB" 1 306 "0x0080"
d G "QEI_OUTPUT_ENABLE" 1 307 "0x0040"
d G "QEI_RESET_WHEN_MAXCOUNT" 1 308 "0x0100"
d G "QEI_RESET_WHEN_IDX_PULSE" 1 309 "0x0004"
d G "QEI_TIMER_GATED" 1 310 "0x0020"
d G "QEI_TIMER_INTERNAL" 1 311 "0x0000"
d G "QEI_TIMER_EXTERNAL" 1 312 "0x0002"
d G "QEI_TIMER_DIV_BY_1" 1 313 "0x0000"
d G "QEI_TIMER_DIV_BY_8" 1 314 "0x0008"
d G "QEI_TIMER_DIV_BY_64" 1 315 "0x0010"
d G "QEI_TIMER_DIV_BY_256" 1 316 "0x0018"
d G "QEI_FILTER_DIV_1" 1 318 "0x0000"
d G "QEI_FILTER_DIV_2" 1 319 "0x0010"
d G "QEI_FILTER_DIV_4" 1 320 "0x0020"
d G "QEI_FILTER_DIV_16" 1 321 "0x0030"
d G "QEI_FILTER_DIV_32" 1 322 "0x0040"
d G "QEI_FILTER_DIV_64" 1 323 "0x0050"
d G "QEI_FILTER_DIV_128" 1 324 "0x0060"
d G "QEI_FILTER_DIV_256" 1 325 "0x0070"
d G "QEI_FILTER_OUTPUT" 1 326 "0x0080"
d G "QEI_NO_ERROR_INTS" 1 327 "0x0100"
d G "QEI_IDX_WHEN_A0" 1 328 "0x0000" "for 2X mode"
d G "QEI_IDX_WHEN_A1" 1 329 "0x0200" "for 2X mode"
d G "QEI_IDX_WHEN_B0" 1 330 "0x0400" "for 2X mode"
d G "QEI_IDX_WHEN_B1" 1 331 "0x0600" "for 2X mode"
d G "QEI_IDX_WHEN_A0_B0" 1 332 "0x0000" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B0" 1 333 "0x0200" "for 4X mode"
d G "QEI_IDX_WHEN_A0_B1" 1 334 "0x0400" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B1" 1 335 "0x0600" "for 4X mode"
d G "QEI_POS_ERROR" 1 337 "0x8000"
d G "QEI_FORWARD" 1 338 "0x0800"
d G "QEI_INDEX_PIN" 1 339 "0x1000"
d G "MPWM_DISABLED" 1 346 "0"
d G "MPWM_FREE_RUN" 1 347 "0x8000"
d G "MPWM_SINGLE_PULSE" 1 348 "0x8001"
d G "MPWM_UP_DOWN" 1 349 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 1 350 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 1 352 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 1 353 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 1 354 "0x20000"
d G "MPWM_DISABLE_UPDATES" 1 355 "0x10000"
d G "MPWM_LATCH_FAULTS" 1 356 "0x100000"
d G "MPWM_INDEPENDENT" 1 359 "0x0001"
d G "MPWM_ENABLE" 1 360 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 1 361 "0x0004"
d G "MPWM_ENABLE_L" 1 362 "0x0002"
d G "MPWM_FORCE_L_0" 1 364 "0x0020"
d G "MPWM_FORCE_L_1" 1 365 "0x0030"
d G "MPWM_FORCE_H_0" 1 366 "0x0040"
d G "MPWM_FORCE_H_1" 1 367 "0x0050"
d G "MPWM_FAULT_LA_HA" 1 369 "0x0700"
d G "MPWM_FAULT_LA_HI" 1 370 "0x0500"
d G "MPWM_FAULT_LI_HA" 1 371 "0x0600"
d G "MPWM_FAULT_LI_HI" 1 372 "0x0400"
d G "MPWM_FAULT_NO_CHANGE" 1 373 "0x0000"
d G "L_TO_H" 1 381 "0x40"
d G "H_TO_L" 1 382 "0"
d G "INTR_GLOBAL" 1 385 "0x400"
d G "INTR_NORMAL" 1 386 "0x100"
d G "INTR_ALTERNATE" 1 387 "0x200"
d G "INTR_NESTING" 1 388 "0x300"
d G "INTR_LEVEL0" 1 389 "0x500"
d G "INTR_LEVEL1" 1 390 "0x501"
d G "INTR_LEVEL2" 1 391 "0x502"
d G "INTR_LEVEL3" 1 392 "0x503"
d G "INTR_LEVEL4" 1 393 "0x504"
d G "INTR_LEVEL5" 1 394 "0x505"
d G "INTR_LEVEL6" 1 395 "0x506"
d G "INTR_LEVEL7" 1 396 "0x507"
d G "INTR_CN_PIN" 1 398 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 1 400 "1"
d G "INT_ADDRERR" 1 401 "2"
d G "INT_STACKERR" 1 402 "3"
d G "INT_MATHERR" 1 403 "4"
d G "INT_DMAERR" 1 404 "5"
d G "INT_EXT0" 1 405 "6"
d G "INT_IC1" 1 406 "7"
d G "INT_OC1" 1 407 "8"
d G "INT_TIMER1" 1 408 "9"
d G "INT_IC2" 1 409 "10"
d G "INT_OC2" 1 410 "11"
d G "INT_TIMER2" 1 411 "12"
d G "INT_TIMER3" 1 412 "13"
d G "INT_SPI1" 1 413 "14"
d G "INT_RDA" 1 414 "15"
d G "INT_TBE" 1 415 "16"
d G "INT_ADC1" 1 416 "17"
d G "INT_EEPROM" 1 417 "18"
d G "INT_SI2C" 1 418 "19"
d G "INT_MI2C" 1 419 "20"
d G "INT_CNI" 1 420 "21"
d G "INT_EXT1" 1 421 "22"
d G "INT_OC3" 1 422 "27"
d G "INT_OC4" 1 423 "29"
d G "INT_TIMER4" 1 424 "31"
d G "INT_TIMER5" 1 425 "33"
d G "INT_EXT2" 1 426 "35"
d G "INT_SPI2" 1 427 "38"
d G "INT_CAN1" 1 428 "39"
d G "INT_IC3" 1 429 "41"
d G "INT_IC4" 1 430 "42"
d G "INT_OC5" 1 431 "48"
d G "INT_OC6" 1 432 "50"
d G "INT_OC7" 1 433 "51"
d G "INT_OC8" 1 434 "52"
d G "INT_EXT3" 1 435 "53"
d G "INT_EX4" 1 436 "54"
d G "INT_PWM1" 1 437 "58"
d G "INT_QEI" 1 438 "60"
d G "INT_FAULTA" 1 439 "66"
d G "INT_FAULTB" 1 440 "68"
D G "PWM_PERIOD" 2 26 "1499"
D G "SET_POINT" 2 27 "16"
V G "sensors_ADC" 3 2 "sint16[15]"
V G "black_limit" 3 2 "sint16"
V G "sensors_BIN" 3 3 "sint16[15]"
V G "base_speed" 3 3 "sint16"
V G "left_correction" 3 3 "sint16"
V G "right_correction" 3 3 "sint16"
V G "last_center" 3 3 "sint16"
V G "center" 3 3 "sint16"
V G "last_error" 3 3 "sint16"
V G "error" 3 3 "sint16"
V G "derivative" 3 3 "sint16"
V G "correction" 3 3 "sint16"
V G "integral" 3 4 "float"
V G "KD" 3 4 "float"
V G "KP" 3 4 "float"
V G "KI" 3 4 "float"
V G "RUN" 3 5 "sint16"
V G "x" 3 6 "sint16"
V G "delay_time" 3 6 "sint16"
V G "buffer" 3 7 "int8[50]" "KD=0,KP=125,KI=0,BaseSpeed=700"
D G "_STDLIB" 4 12 ""
D G "RAND_MAX" 4 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 25 "1"
T G "div_t" 4 33 "{sint16 quot,sint16 rem}"
T G "ldiv_t" 4 38 "{sint32 quot,sint32 rem}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 21 "unsigned int8"
D G "wchar_t" 5 22 "char"
D G "NULL" 5 23 "0"
D G "offsetof" 5 25 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 4 43 2 "FUNCTION"
C L "atoi" 4 46 1 "*"
C L "atoi" 4 46 1 "*"
F G "atoi" 4 50 "sint16()"
V L "s" 4 50 "*int8" "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 4 56 "(s) atol(s)"
C L "atoi" 4 46 5 "FUNCTION"
F G "atoi48" 4 68 "?()"
V L "s" 4 68 "*int8" "Syntax: signed int64  atoi64(char * s)"
C L "atoi48" 4 46 2 "FUNCTION"
F G "atoi64" 4 73 "?()"
V L "s" 4 73 "*int8" "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi64" 4 46 2 "FUNCTION"
F G "itoa" 4 79 "*int8()"
V L "num" 4 79 "sint32"
V L "base" 4 79 "int16"
V L "s" 4 79 "*int8" "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 81 1 "*"
C L "itoa" 4 81 1 "*"
F G "atol" 4 85 "sint32()"
V L "s" 4 85 "*int8" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
F G "strtol" 4 93 "sint32()"
V L "s" 4 93 "*int8"
V L "endptr" 4 93 "*int8"
V L "base" 4 93 "sint16" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
F G "strtoul" 4 101 "int32()"
V L "s" 4 101 "*int8"
V L "endptr" 4 101 "*int8"
V L "base" 4 101 "sint16" "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 95 2 "FUNCTION"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
F G "strtof" 4 110 "float()"
V L "s" 4 110 "*int8"
V L "endptr" 4 110 "*int8"
F G "strtof48" 4 112 "?()"
V L "s" 4 112 "*int8"
V L "endptr" 4 112 "*int8"
F G "strtod" 4 113 "?()"
V L "s" 4 113 "*int8"
V L "endptr" 4 113 "*int8" "Standard template: float32 atof(char * s)"
C L "strtod" 4 120 1 "*"
D G "atof" 4 124 "(s)   strtof(s, 0)"
C L "strtod" 4 120 3 "FUNCTION"
C L "strtod" 4 130 1 "*"
D G "atof48" 4 134 "(s) strtof48(s, 0)"
C L "strtod" 4 130 1 "FUNCTION"
C L "strtod" 4 136 1 "*"
D G "atof64" 4 140 "(s) strtod(s, 0)"
C L "strtod" 4 136 1 "FUNCTION"
C L "strtod" 4 143 1 "*"
C L "strtod" 4 143 1 "*"
C L "strtod" 4 143 1 "*"
F G "atoe" 4 153 "float()"
V L "s" 4 153 "*int8" "Pseudo-random sequence generation functions"
C L "atoe" 4 143 1 "FUNCTION"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
F G "rand" 4 169 "int16()"
C L "rand" 4 160 1 "FUNCTION"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
F G "srand" 4 191 "void()"
V L "seed" 4 191 "int32" "Memory management functions"
C L "srand" 4 171 3 "FUNCTION"
F G "system" 4 205 "sint8()"
V L "string" 4 205 "*int8" "Searching and sorting utilities"
C L "system" 4 171 1 "FUNCTION"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 4 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
D G "labs" 4 249 "abs"
F G "div" 4 251 "div_t()"
V L "numer" 4 251 "sint16"
V L "denom" 4 251 "sint16"
F G "ldiv" 4 252 "ldiv_t()"
V L "numer" 4 252 "sint32"
V L "denom" 4 252 "sint32" "Multibyte character functions"
C L "ldiv" 4 229 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
D G "_STRING" 6 12 ""
C L "ldiv" 5 2 7 "FUNCTION"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 6 19 10 "FUNCTION"
F G "memmove" 6 34 "*int8()"
V L "s1" 6 34 "*int8"
V L "s2" 6 34 "*int8"
V L "n" 6 34 "int8"
V L "sc1" 6 36 "*int8"
V L "sc2" 6 37 "*int8"
D G "strcopy" 6 54 "strcpy"
C L "strncpy" 6 19 4 "FUNCTION"
F G "strncpy" 6 61 "*int8()"
V L "s1" 6 61 "*int8"
V L "s2" 6 61 "*int8"
V L "n" 6 61 "int8"
V L "s" 6 63 "*int8"
C L "strcat" 6 19 3 "FUNCTION"
F G "strcat" 6 78 "*int8()"
V L "s1" 6 78 "*int8"
V L "s2" 6 78 "*int8"
V L "s" 6 80 "*int8"
C L "strncat" 6 19 2 "FUNCTION"
F G "strncat" 6 96 "*int8()"
V L "s1" 6 96 "*int8"
V L "s2" 6 96 "*int8"
V L "n" 6 96 "int8"
V L "s" 6 98 "*int8"
C L "memcmp" 6 19 3 "FUNCTION"
F G "memcmp" 6 120 "sint8()"
V L "s1" 6 120 "*int8"
V L "s2" 6 120 "*int8"
V L "n" 6 120 "int8"
V L "su1" 6 122 "*int8"
V L "su2" 6 122 "*int8"
C L "strcmp" 6 19 2 "FUNCTION"
F G "strcmp" 6 134 "sint8()"
V L "s1" 6 134 "*int8"
V L "s2" 6 134 "*int8"
C L "strcoll" 6 19 2 "FUNCTION"
F G "strcoll" 6 144 "sint8()"
V L "s1" 6 144 "*int8"
V L "s2" 6 144 "*int8"
C L "strncmp" 6 19 4 "FUNCTION"
F G "strncmp" 6 157 "sint8()"
V L "s1" 6 157 "*int8"
V L "s2" 6 157 "*int8"
V L "n" 6 157 "int8"
C L "strxfrm" 6 19 3 "FUNCTION"
F G "strxfrm" 6 169 "int8()"
V L "s1" 6 169 "*int8"
V L "s2" 6 169 "*int8"
V L "n" 6 169 "int8"
V L "s" 6 171 "*int8"
V L "n1" 6 172 "int8"
C L "memchr" 6 19 3 "FUNCTION"
F G "memchr" 6 191 "*int8()"
V L "s" 6 191 "*int8"
V L "c" 6 191 "int8"
V L "n" 6 191 "int8"
V L "uc" 6 193 "int8"
V L "su" 6 194 "*int8"
C L "strchr" 6 19 2 "FUNCTION"
F G "strchr" 6 205 "*int8()"
V L "s" 6 205 "*int8"
V L "c" 6 205 "int8"
C L "strcspn" 6 19 4 "FUNCTION"
F G "strcspn" 6 217 "int8()"
V L "s1" 6 217 "*int8"
V L "s2" 6 217 "*int8"
V L "sc1" 6 219 "*int8"
V L "sc2" 6 219 "*int8"
C L "strpbrk" 6 19 4 "FUNCTION"
F G "strpbrk" 6 232 "*int8()"
V L "s1" 6 232 "*int8"
V L "s2" 6 232 "*int8"
V L "sc1" 6 234 "*int8"
V L "sc2" 6 234 "*int8"
C L "strrchr" 6 19 2 "FUNCTION"
F G "strrchr" 6 247 "*int8()"
V L "s" 6 247 "*int8"
V L "c" 6 247 "int8"
V L "p" 6 249 "*int8"
C L "strspn" 6 19 2 "FUNCTION"
F G "strspn" 6 262 "int8()"
V L "s1" 6 262 "*int8"
V L "s2" 6 262 "*int8"
V L "sc1" 6 264 "*int8"
V L "sc2" 6 264 "*int8"
C L "strstr" 6 19 6 "FUNCTION"
F G "strstr" 6 281 "*int8()"
V L "s1" 6 281 "*int8"
V L "s2" 6 281 "*int8"
V L "s" 6 283 "*int8"
V L "t" 6 283 "*int8"
C L "strtok" 6 19 13 "FUNCTION"
F G "strtok" 6 320 "*int8()"
V L "s1" 6 320 "*int8"
V L "s2" 6 320 "*int8"
V L "beg" 6 322 "*int8"
V L "end" 6 322 "*int8"
V L "save" 6 323 "*int8"
C L "strlen" 6 19 6 "FUNCTION"
F G "strlen" 6 369 "int8()"
V L "s" 6 369 "*int8"
V L "sc" 6 371 "*int8"
C L "stricmp" 6 19 2 "FUNCTION"
F G "stricmp" 6 380 "sint8()"
V L "s1" 6 380 "*int8"
V L "s2" 6 380 "*int8"
C L "strlwr" 6 19 3 "FUNCTION"
F G "strlwr" 6 394 "*int8()"
V L "s" 6 394 "*int8"
V L "p" 6 396 "*int8"
F G "div" 4 274 "div_t()"
V L "numer" 4 274 "sint16"
V L "denom" 4 274 "sint16"
V L "val" 4 276 "div_t"
F G "ldiv" 4 282 "ldiv_t(sint16 denom)"
V L "numer" 4 282 "sint32"
V L "denom" 4 282 "sint32"
V L "val" 4 284 "ldiv_t"
F G "atoe" 4 292 "float()"
V L "s" 4 292 "*int8"
V L "pow10" 4 294 "float"
V L "result" 4 295 "float"
V L "sign" 4 296 "int8"
V L "expsign" 4 297 "int8"
V L "c" 4 298 "int8"
V L "ptr" 4 299 "int8"
V L "i" 4 300 "int8"
V L "exp" 4 301 "float"
V L "expcnt" 4 302 "int8"
C L "atoe" 4 328 1 "FUNCTION"
F G "atoi" 4 429 "sint16()"
V L "s" 4 429 "*int8"
V L "result" 4 431 "sint16"
V L "sign" 4 432 "int16"
V L "base" 4 432 "int16"
V L "index" 4 432 "int16"
V L "c" 4 433 "int8"
C L "atoi" 4 328 1 "FUNCTION"
C L "atoi" 4 328 1 "FUNCTION"
C L "atoi" 4 328 1 "FUNCTION"
C L "atoi" 4 328 1 "FUNCTION"
C L "atoi" 4 328 1 "FUNCTION"
C L "atoi" 4 328 1 "FUNCTION"
F G "atol" 4 498 "sint32()"
V L "s" 4 498 "*int8"
V L "result" 4 500 "sint32"
V L "sign" 4 501 "int16"
V L "base" 4 501 "int16"
V L "index" 4 501 "int16"
V L "c" 4 502 "int8"
C L "atol" 4 328 1 "FUNCTION"
C L "atol" 4 328 1 "FUNCTION"
C L "atol" 4 328 1 "FUNCTION"
C L "atol" 4 328 1 "FUNCTION"
C L "mult_with10" 4 328 1 "FUNCTION"
F G "mult_with10" 4 565 "sint32()"
V L "num" 4 565 "sint32"
F G "atoi48" 4 639 "?()"
V L "s" 4 639 "*int8"
V L "result" 4 641 "?"
V L "sign" 4 642 "sint8"
V L "base" 4 642 "sint8"
V L "index" 4 642 "sint8"
V L "c" 4 643 "int8"
C L "atoi48" 4 328 1 "FUNCTION"
C L "atoi48" 4 328 1 "FUNCTION"
C L "atoi48" 4 328 1 "FUNCTION"
C L "atoi48" 4 328 1 "FUNCTION"
C L "atoi48" 4 328 1 "FUNCTION"
F G "atoi64" 4 704 "?()"
V L "s" 4 704 "*int8"
V L "result" 4 706 "?"
V L "sign" 4 707 "sint8"
V L "base" 4 707 "sint8"
V L "index" 4 707 "sint8"
V L "c" 4 708 "int8"
C L "atoi64" 4 328 1 "FUNCTION"
C L "atoi64" 4 328 1 "FUNCTION"
C L "atoi64" 4 328 1 "FUNCTION"
C L "atoi64" 4 328 1 "FUNCTION"
C L "atoi64" 4 328 1 "FUNCTION"
F G "itoa" 4 770 "*int8()"
V L "num" 4 770 "sint32"
V L "base" 4 770 "int16"
V L "s" 4 770 "*int8"
V L "temp" 4 772 "int32"
V L "i" 4 773 "int8"
V L "sign" 4 773 "int8"
V L "cnt" 4 773 "int8"
V L "c" 4 774 "int8"
C L "itoa" 4 328 1 "FUNCTION"
C L "itoa" 4 328 1 "FUNCTION"
C L "itoa" 4 328 1 "FUNCTION"
C L "itoa" 4 328 1 "FUNCTION"
C L "itoa" 4 328 1 "FUNCTION"
F G "strtof" 4 807 "float()"
V L "s" 4 807 "*int8"
V L "endptr" 4 807 "*int8"
V L "pow10" 4 809 "float"
V L "result" 4 810 "float"
V L "skip" 4 811 "int1"
V L "sign" 4 811 "int1"
V L "point" 4 811 "int1"
V L "c" 4 812 "int8"
V L "ptr" 4 813 "int8"
F G "strtof48" 4 880 "?()"
V L "s" 4 880 "*int8"
V L "endptr" 4 880 "*int8"
V L "pow10" 4 882 "?"
V L "result" 4 883 "?"
V L "skip" 4 884 "int1"
V L "sign" 4 884 "int1"
V L "point" 4 884 "int1"
V L "c" 4 885 "int8"
V L "ptr" 4 886 "int8"
F G "strtod" 4 952 "?()"
V L "s" 4 952 "*int8"
V L "endptr" 4 952 "*int8"
V L "pow10" 4 954 "?"
V L "result" 4 955 "?"
V L "skip" 4 956 "int1"
V L "sign" 4 956 "int1"
V L "point" 4 956 "int1"
V L "c" 4 957 "int8"
V L "ptr" 4 958 "int8"
F G "strtoul" 4 1025 "int32()"
V L "s" 4 1025 "*int8"
V L "endptr" 4 1025 "*int8"
V L "base" 4 1025 "sint16"
V L "sc" 4 1027 "*int8"
V L "s1" 4 1027 "*int8"
V L "sd" 4 1027 "*int8"
V L "x" 4 1028 "int32"
V L "sign" 4 1029 "int8"
V L "digits" 4 1030 "int8[1]"
C L "strtoul" 4 328 1 "FUNCTION"
C L "strtoul" 4 328 1 "FUNCTION"
C L "strtoul" 4 328 1 "FUNCTION"
F G "strtol" 4 1087 "sint32()"
V L "s" 4 1087 "*int8"
V L "endptr" 4 1087 "*int8"
V L "base" 4 1087 "sint16"
V L "sc" 4 1089 "*int8"
V L "s1" 4 1089 "*int8"
V L "sd" 4 1089 "*int8"
V L "x" 4 1090 "sint32"
V L "sign" 4 1091 "int8"
V L "digits" 4 1092 "int8[1]"
C L "strtol" 4 328 1 "FUNCTION"
C L "strtol" 4 328 1 "FUNCTION"
C L "strtol" 4 328 1 "FUNCTION"
F G "system" 4 1150 "sint8()"
V L "string" 4 1150 "*int8"
F G "mblen" 4 1155 "sint8(*int8 string)"
V L "s" 4 1155 "*int8"
V L "n" 4 1155 "int8"
F G "mbtowc" 4 1160 "sint8()"
V L "pwc" 4 1160 "*int8"
V L "s" 4 1160 "*int8"
V L "n" 4 1160 "int8"
F G "wctomb" 4 1166 "sint8()"
V L "s" 4 1166 "*int8"
V L "wchar" 4 1166 "int8"
F G "mbstowcs" 4 1172 "int8()"
V L "pwcs" 4 1172 "*int8"
V L "s" 4 1172 "*int8"
V L "n" 4 1172 "int8"
F G "wcstombs" 4 1178 "int8()"
V L "s" 4 1178 "*int8"
V L "pwcs" 4 1178 "*int8"
V L "n" 4 1178 "int8"
V G "_Randseed" 4 1188 "int32"
F G "rand" 4 1190 "int16()"
F G "srand" 4 1196 "void()"
V L "seed" 4 1196 "int32"
T G "*_Cmpfun" 4 1208 "sint16(int32 seed)"
V L "p1" 4 1208 "*int8"
V L "p2" 4 1208 "*int8"
F G "qsort" 4 1213 "void()"
V L "qdata" 4 1213 "*int8"
V L "qitems" 4 1213 "int16"
V L "qsize" 4 1213 "int16"
V L "cmp" 4 1213 "_Cmpfun"
V L "m" 4 1214 "int16"
V L "j" 4 1214 "int16"
V L "i" 4 1214 "int16"
V L "l" 4 1214 "int16"
V L "done" 4 1215 "int1"
V L "t" 4 1216 "int8[16]"
F G "bsearch" 4 1241 "*int8()"
V L "key" 4 1241 "*int8"
V L "base" 4 1241 "*int8"
V L "num" 4 1241 "int8"
V L "width" 4 1241 "int8"
V L "cmp" 4 1241 "_Cmpfun"
V L "p" 4 1243 "*int8"
V L "q" 4 1243 "*int8"
V L "n" 4 1244 "int8"
V L "pivot" 4 1245 "int8"
V L "val" 4 1246 "sint16"
C L "bsearch" 4 328 1 "FUNCTION"
F G "ADC_Init" 9 2 "void()"
C L "ADC_Init" 9 4 1 "FUNCTION"
F G "Motor_Init" 9 8 "void()"
V L "period" 9 8 "sint16"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
C L "Motor_Init" 9 4 1 "FUNCTION"
F G "Set_Motor_Duty" 9 24 "void()"
V L "Left" 9 24 "sint16"
V L "Right" 9 24 "sint16"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
C L "Set_Motor_Duty" 9 4 1 "FUNCTION"
F G "Print_Center" 9 52 "void()"
V L "center" 9 52 "sint16"
F G "Read_Sensors_Digital" 9 59 "void()"
V L "value_array" 9 59 "*sint16"
F G "Read_Sensors" 9 74 "void()"
V L "value_array" 9 74 "*sint16"
C L "Read_Sensors" 9 4 1 "FUNCTION"
F G "Get_Black_Limit" 9 111 "void()"
V L "limit" 9 111 "*sint16"
V L "st_index" 9 111 "sint16"
V L "end_index" 9 111 "sint16"
V L "array" 9 111 "*sint16"
V L "i" 9 113 "sint16"
V L "min" 9 114 "sint16"
V L "max" 9 114 "sint16"
C L "Get_Black_Limit" 9 4 1 "FUNCTION"
F G "Digitalize_Array" 9 123 "void()"
V L "array_ADC" 9 123 "*sint16"
V L "array_BIN" 9 123 "*sint16"
V L "limit" 9 123 "sint16"
V L "st_index" 9 123 "sint16"
V L "end_index" 9 123 "sint16"
V L "i" 9 125 "sint16"
F G "Get_Average_Center_Digital" 9 132 "void()"
V L "array_BIN" 9 132 "*sint16"
V L "st_index" 9 132 "sint16"
V L "end_index" 9 132 "sint16"
V L "center" 9 132 "*sint16"
V L "i" 9 134 "sint16"
V L "pixels_w" 9 135 "sint16"
V L "values_w" 9 135 "sint16"
F G "Get_Average_Center" 9 148 "void()"
V L "array_BIN" 9 148 "*sint16"
V L "st_index" 9 148 "sint16"
V L "end_index" 9 148 "sint16"
V L "center" 9 148 "*sint16"
V L "i" 9 150 "sint16"
V L "pixels_b" 9 151 "sint16"
V L "values_b" 9 151 "sint16"
V L "pixels_w" 9 151 "sint16"
V L "values_w" 9 151 "sint16"
F G "Powered_Error" 9 173 "void()"
V L "error" 9 173 "float"
V L "correction" 9 173 "*float"
V L "max" 9 173 "float"
V L "max_c" 9 173 "float"
V L "step" 9 175 "float"
V L "value" 9 175 "float"
F G "Get_Value" 9 188 "void()"
V L "val" 9 188 "*float"
V L "i" 9 190 "sint16"
F G "Get_Value_L" 9 201 "void()"
V L "val" 9 201 "*sint16"
V L "i" 9 203 "sint16"
F G "isr" 9 215 "void()"
V L "option" 9 217 "int8"
F G "ADC_Init" 8 3 "void()"
F G "Motor_Init" 8 4 "void()"
V L "period" 8 4 "sint16"
F G "Set_Motor_Duty" 8 5 "void(sint16 period)"
V L "Left" 8 5 "sint16"
V L "Right" 8 5 "sint16"
F G "Print_Center" 8 6 "void(sint16 Left,sint16 Right)"
V L "center" 8 6 "sint16"
F G "Read_Sensors" 8 8 "void(sint16 center,sint16 Right)"
V L "value_array" 8 8 "*sint16"
F G "Read_Sensors_Digital" 8 9 "void(*sint16 value_array,sint16 Right)"
V L "value_array" 8 9 "*sint16"
F G "Get_Black_Limit" 8 10 "void(*sint16 value_array,sint16 Right)"
V L "limit" 8 10 "sint16"
V L "st_index" 8 10 "sint16"
V L "end_index" 8 10 "sint16"
V L "array" 8 10 "*sint16"
F G "Digitalize_Array" 8 11 "void()"
V L "array_ADC" 8 11 "*sint16"
V L "array_BIN" 8 11 "*sint16"
V L "limit" 8 11 "sint16"
V L "st_index" 8 11 "sint16"
V L "end_index" 8 11 "sint16"
F G "Get_Average_Center" 8 12 "void(*sint16 array_ADC,*sint16 array_BIN,sint16 limit,sint16 st_index,sint16 end_index)"
V L "array_BIN" 8 12 "*sint16"
V L "st_index" 8 12 "sint16"
V L "end_index" 8 12 "sint16"
V L "center" 8 12 "*sint16"
F G "Get_Average_Center_Digital" 8 13 "void(*sint16 array_BIN,sint16 st_index,sint16 end_index,*sint16 center,sint16 end_index)"
V L "array_BIN" 8 13 "*sint16"
V L "st_index" 8 13 "sint16"
V L "end_index" 8 13 "sint16"
V L "center" 8 13 "*sint16"
F G "Powered_Error" 8 14 "void(*sint16 array_BIN,sint16 st_index,sint16 end_index,*sint16 center,sint16 end_index)"
V L "error" 8 14 "float"
V L "correction" 8 14 "*float"
V L "max" 8 14 "float"
V L "max_c" 8 14 "float"
F G "Get_Value" 8 15 "void(float error,*float correction,float max,float max_c,sint16 end_index)"
V L "val" 8 15 "*float"
F G "Get_Value_L" 8 16 "void(*float val,*float correction,float max,float max_c,sint16 end_index)"
V L "val" 8 16 "*sint16"
F G "MAIN" 0 9 "void(*sint16 val,*float correction,float max,float max_c,sint16 end_index)"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_eeprom" 1 3
F B "write_eeprom" 2 3
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_low_volt_detect" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 0
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 0
F B "spi_data_is_in3" 0 0
F B "setup_qei" 1 4
F B "qei_set_count" 1 2
F B "qei_get_count" 0 1
F B "qei_status" 0 1
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 0
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 2
F B "setup_uart" 1 2
